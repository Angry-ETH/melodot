
//! Autogenerated weights for pallet_farmers_fortune
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `iZbp1afye3y82ktye25uj4Z`, CPU: `Intel(R) Xeon(R) Platinum`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/melodot-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-farmers-fortune
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./crates/pallet-farmers-fortune/src/weights.rs
// --template=./frame-weight-template.hbs
// -linfo

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_farmers_fortune.
pub trait WeightInfo {
	fn claim() -> Weight;
}

/// Weights for pallet_farmers_fortune using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: FarmersFortune ClaimantsForBlock (r:1 w:1)
	/// Proof: FarmersFortune ClaimantsForBlock (max_values: None, max_size: Some(3222), added: 5697, mode: MaxEncodedLen)
	/// Storage: System BlockHash (r:2 w:0)
	/// Proof: System BlockHash (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: MeloStore CommitmentsExt (r:2 w:0)
	/// Proof: MeloStore CommitmentsExt (max_values: None, max_size: Some(4815), added: 7290, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `719`
		//  Estimated: `15570`
		// Minimum execution time: 805_372_042_000 picoseconds.
		Weight::from_parts(809_074_147_000, 15570)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: FarmersFortune ClaimantsForBlock (r:1 w:1)
	/// Proof: FarmersFortune ClaimantsForBlock (max_values: None, max_size: Some(3222), added: 5697, mode: MaxEncodedLen)
	/// Storage: System BlockHash (r:2 w:0)
	/// Proof: System BlockHash (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: MeloStore CommitmentsExt (r:2 w:0)
	/// Proof: MeloStore CommitmentsExt (max_values: None, max_size: Some(4815), added: 7290, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `719`
		//  Estimated: `15570`
		// Minimum execution time: 805_372_042_000 picoseconds.
		Weight::from_parts(809_074_147_000, 15570)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
