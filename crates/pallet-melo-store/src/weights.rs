
//! Autogenerated weights for pallet_melo_store
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `PC-20180331FBFF`, CPU: `Intel(R) Core(TM) i7-4790K CPU @ 4.00GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/melodot-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-melo-store
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./crates/pallet-melo-store/src/weights.rs
// --template=./frame-weight-template.hbs
// -linfo

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_melo_store.
pub trait WeightInfo {
	fn register_app() -> Weight;
	fn submit_data(k: u32, ) -> Weight;
	fn validate_unsigned_and_then_report(k: u32, e: u32, ) -> Weight;
}

/// Weights for pallet_melo_store using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: MeloStore AppId (r:1 w:1)
	/// Proof: MeloStore AppId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn register_app() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1489`
		// Minimum execution time: 18_600_000 picoseconds.
		Weight::from_parts(19_200_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: MeloStore AppId (r:1 w:0)
	/// Proof: MeloStore AppId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: MeloStore Metadata (r:1 w:1)
	/// Proof: MeloStore Metadata (max_values: None, max_size: Some(96770014), added: 96772489, mode: MaxEncodedLen)
	/// The range of component `k` is `[1, 100]`.
	fn submit_data(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `96773479`
		// Minimum execution time: 28_200_000 picoseconds.
		Weight::from_parts(30_490_082, 96773479)
			// Standard Error: 5_729
			.saturating_add(Weight::from_parts(490_654, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: MeloStore Keys (r:1 w:0)
	/// Proof: MeloStore Keys (max_values: Some(1), max_size: Some(320002), added: 320497, mode: MaxEncodedLen)
	/// Storage: MeloStore Metadata (r:1 w:1)
	/// Proof: MeloStore Metadata (max_values: None, max_size: Some(96770014), added: 96772489, mode: MaxEncodedLen)
	/// Storage: MeloStore UnavailableVote (r:100 w:100)
	/// Proof: MeloStore UnavailableVote (max_values: None, max_size: Some(426), added: 2901, mode: MaxEncodedLen)
	/// The range of component `k` is `[1, 1000]`.
	/// The range of component `e` is `[1, 100]`.
	fn validate_unsigned_and_then_report(k: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17235 + k * (32 ±0)`
		//  Estimated: `96773479 + e * (2901 ±0)`
		// Minimum execution time: 234_300_000 picoseconds.
		Weight::from_parts(242_300_000, 96773479)
			// Standard Error: 13_973
			.saturating_add(Weight::from_parts(429_668, 0).saturating_mul(k.into()))
			// Standard Error: 139_884
			.saturating_add(Weight::from_parts(8_776_048, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(e.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_parts(0, 2901).saturating_mul(e.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: MeloStore AppId (r:1 w:1)
	/// Proof: MeloStore AppId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn register_app() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1489`
		// Minimum execution time: 18_600_000 picoseconds.
		Weight::from_parts(19_200_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: MeloStore AppId (r:1 w:0)
	/// Proof: MeloStore AppId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: MeloStore Metadata (r:1 w:1)
	/// Proof: MeloStore Metadata (max_values: None, max_size: Some(96770014), added: 96772489, mode: MaxEncodedLen)
	/// The range of component `k` is `[1, 100]`.
	fn submit_data(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `96773479`
		// Minimum execution time: 28_200_000 picoseconds.
		Weight::from_parts(30_490_082, 96773479)
			// Standard Error: 5_729
			.saturating_add(Weight::from_parts(490_654, 0).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: MeloStore Keys (r:1 w:0)
	/// Proof: MeloStore Keys (max_values: Some(1), max_size: Some(320002), added: 320497, mode: MaxEncodedLen)
	/// Storage: MeloStore Metadata (r:1 w:1)
	/// Proof: MeloStore Metadata (max_values: None, max_size: Some(96770014), added: 96772489, mode: MaxEncodedLen)
	/// Storage: MeloStore UnavailableVote (r:100 w:100)
	/// Proof: MeloStore UnavailableVote (max_values: None, max_size: Some(426), added: 2901, mode: MaxEncodedLen)
	/// The range of component `k` is `[1, 1000]`.
	/// The range of component `e` is `[1, 100]`.
	fn validate_unsigned_and_then_report(k: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17235 + k * (32 ±0)`
		//  Estimated: `96773479 + e * (2901 ±0)`
		// Minimum execution time: 234_300_000 picoseconds.
		Weight::from_parts(242_300_000, 96773479)
			// Standard Error: 13_973
			.saturating_add(Weight::from_parts(429_668, 0).saturating_mul(k.into()))
			// Standard Error: 139_884
			.saturating_add(Weight::from_parts(8_776_048, 0).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(e.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_parts(0, 2901).saturating_mul(e.into()))
	}
}
